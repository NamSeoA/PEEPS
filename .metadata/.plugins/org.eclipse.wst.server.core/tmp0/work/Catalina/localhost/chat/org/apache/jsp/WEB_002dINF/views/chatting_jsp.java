/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-02-04 05:26:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-jstl-1.2.jar", Long.valueOf(1612264552160L));
    _jspx_dependants.put("jar:file:/C:/Users/kho3/OneDrive/Documents/GitHub/PEEPS/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Peeps_Chat/WEB-INF/lib/jstl-jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\r\n");
      out.write("<!-- css -->\r\n");
      out.write("<link rel=\"styleSheet\" href=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("#right {\r\n");
      out.write("\ttext-align: right;\r\n");
      out.write("\twidth: auto;\r\n");
      out.write("\tmax-width: 90%;\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\tbackground-color: #F4F4F4;\r\n");
      out.write("\tborder-radius: 5px;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("\tmargin-right: 10px;\r\n");
      out.write("\tword-wrap: break-word;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#left {\r\n");
      out.write("\ttext-align: left;\r\n");
      out.write("\twidth: auto;\r\n");
      out.write("\tmax-width: 90%;\r\n");
      out.write("\tdisplay: inline-block;\r\n");
      out.write("\tbackground-color: #F2D665;\r\n");
      out.write("\tborder-radius: 5px;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("\tmargin-left: 10px;\r\n");
      out.write("\tword-wrap: break-word;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<!-- SocketJS CDN -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.12.4.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t//websocket을 지정한 URL로 연결\r\n");
      out.write("\tvar sock = new SockJS(\"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t//websocket 서버에서 메시지를 보내면 자동으로 실행된다.\r\n");
      out.write("\tsock.onmessage = onMessage;\r\n");
      out.write("\t//websocket 과 연결을 끊고 싶을때 실행하는 메소드\r\n");
      out.write("\tsock.onclose = onClose;\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t$(\"form\").submit(function() {\r\n");
      out.write("\t\t\tconsole.log('send message...');\r\n");
      out.write("\t\t\tsendMessage();\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('#message').val('');\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('#message').focus();\r\n");
      out.write("\t\t\t// .focus() -> 버튼이면, 엔터 사용 시, 클릭 효과\r\n");
      out.write("\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tfunction sendMessage() {\r\n");
      out.write("\t\tvar mes = {\r\n");
      out.write("\t\t\tuser : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("',\r\n");
      out.write("\t\t\tto : 'jin', // 현재 페이지 작성자의 id를 작성\r\n");
      out.write("\t\t\ttime : 'time.getTime()',// Date.now(),\r\n");
      out.write("\t\t\tmessage : $(\"#message\").val()\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tsock.send(JSON.stringify(mes));\r\n");
      out.write("\t\tconsole.log(JSON.stringify(mes));\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//evt 파라미터는 websocket이 보내준 데이터다.\r\n");
      out.write("\tfunction onMessage(evt) { // 변수 안에 function자체를 넣음.\r\n");
      out.write("\t\tvar data = evt.data;\r\n");
      out.write("\t\tmesData = JSON.parse(data);\r\n");
      out.write("\t\tvar sessionid = null;\r\n");
      out.write("\t\tvar message = null;\r\n");
      out.write("\t\tconsole.log(mesData);\r\n");
      out.write("\t\t// current session id\r\n");
      out.write("\t\tvar currentuser_session = $('#sessionuserid').val();\r\n");
      out.write("\t\tconsole.log('current session id: ' + currentuser_session);\r\n");
      out.write("\r\n");
      out.write("\t\t/* \r\n");
      out.write("\t\t\tvar target = $('#chattingBox-1');\r\n");
      out.write("\t\t\tif (target.length == 0) {\r\n");
      out.write("\t\t\t$('<div id=\\ \"chaggingBox-1\\ class=\\\"chattingBox\\\"></div>').prependTo('#chatdata');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t*/\r\n");
      out.write("\r\n");
      out.write("\t\t// 나와 상대방이 보낸 메세지를 구분하여 출력\r\n");
      out.write("\t\tif (mesData.user == currentuser_session) {\r\n");
      out.write("\t\t\tvar printHTML = \"<div class='well text_right' id='right'>\";\r\n");
      out.write("\t\t\tprintHTML += \"<div class='alert alert-info'>\";\r\n");
      out.write("\t\t\tprintHTML += \"<strong>[\" + mesData.user + \"] -> \" + mesData.message\r\n");
      out.write("\t\t\t\t\t+ \"</strong>\";\r\n");
      out.write("\t\t\tprintHTML += \"</div>\";\r\n");
      out.write("\t\t\tprintHTML += \"</div>\";\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('#chatdata').append(printHTML);\r\n");
      out.write("\t\t\t// printHTML을 chatdata 맨 밑에 추가\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tvar printHTML = \"<div class='well text_left' id='left'>\";\r\n");
      out.write("\t\t\tprintHTML += \"<div class='alert alert-warning'>\";\r\n");
      out.write("\t\t\tprintHTML += \"<strong>[\" + mesData.user + \"] -> \" + mesData.message\r\n");
      out.write("\t\t\t\t\t+ \"</strong>\";\r\n");
      out.write("\t\t\tprintHTML += \"</div>\";\r\n");
      out.write("\t\t\tprintHTML += \"</div>\";\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('#chatdata').append(printHTML);\r\n");
      out.write("\t\t\t// printHTML을 chatdata 맨 밑에 추가\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tconsole.log('chatting data: ' + data);\r\n");
      out.write("\r\n");
      out.write("\t\t/* sock.close(); */\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onClose(evt) {\r\n");
      out.write("\t\t$(\"#data\").append(\"연결 끊김\");\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/views/chatting.jsp(12,29) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/css/default.css");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f1_reused = false;
    try {
      _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f1.setParent(null);
      // /WEB-INF/views/chatting.jsp(65,24) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f1.setValue("/chat");
      int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
      if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      _jspx_th_c_005furl_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f1, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f1_reused);
    }
    return false;
  }
}
